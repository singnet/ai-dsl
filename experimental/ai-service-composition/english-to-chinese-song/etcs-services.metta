;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Services involved in creating a composite service to turn English
;; singing into Chinese singing.
;;
;; The service specifications are obtained from the output of
;;
;; ./gen-snet-marketplace-metta.sh naint.machine-translation naint.midi2voice-zh snet.sound-spleeter snet.speech-recognition
;;
;; then curated to retain only the information about the type
;; signatures of service calls.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: translate.proto
;; Protobuf syntax: proto3
;; Prefix: naint.machine-translation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define naint.machine-translation.Input type
(: naint.machine-translation.Input Type)

;; Define naint.machine-translation.Input constuctor
(: naint.machine-translation.MkInput
   (-> String ; source_lang
       (-> String ; target_lang
           (-> String ; sentences_url
               naint.machine-translation.Input))))
;; Define naint.machine-translation.Input access functions

;; Define naint.machine-translation.Input.source_lang
(: naint.machine-translation.Input.source_lang
   (-> naint.machine-translation.Input String))

;; Define naint.machine-translation.Input.target_lang
(: naint.machine-translation.Input.target_lang
   (-> naint.machine-translation.Input String))

;; Define naint.machine-translation.Input.sentences_url
(: naint.machine-translation.Input.sentences_url
   (-> naint.machine-translation.Input String))

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define naint.machine-translation.Output type
(: naint.machine-translation.Output Type)

;; Define naint.machine-translation.Output constuctor
(: naint.machine-translation.MkOutput
   (-> String ; translation
       naint.machine-translation.Output))
;; Define naint.machine-translation.Output access functions

;; Define naint.machine-translation.Output.translation
(: naint.machine-translation.Output.translation
   (-> naint.machine-translation.Output String))

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; RomanceTranslator ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define naint.machine-translation.translate service method
(: naint.machine-translation.translate
   (-> naint.machine-translation.Input naint.machine-translation.Output))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: singingZH.proto
;; Protobuf syntax: proto3
;; Protobuf package: singingZH
;; Prefix: naint.midi2voice-zh
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define naint.midi2voice-zh.Query type
(: naint.midi2voice-zh.Query Type)

;; Define naint.midi2voice-zh.Query constuctor
(: naint.midi2voice-zh.MkQuery
   (-> String ; text
       (-> Bytes ; midi_file
           (-> Float ; normalize
               naint.midi2voice-zh.Query))))
;; Define naint.midi2voice-zh.Query access functions

;; Define naint.midi2voice-zh.Query.text
(: naint.midi2voice-zh.Query.text
   (-> naint.midi2voice-zh.Query String))

;; Define naint.midi2voice-zh.Query.midi_file
(: naint.midi2voice-zh.Query.midi_file
   (-> naint.midi2voice-zh.Query Bytes))

;; Define naint.midi2voice-zh.Query.normalize
(: naint.midi2voice-zh.Query.normalize
   (-> naint.midi2voice-zh.Query Float))

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define naint.midi2voice-zh.Answer type
(: naint.midi2voice-zh.Answer Type)

;; Define naint.midi2voice-zh.Answer constuctor
(: naint.midi2voice-zh.MkAnswer
   (-> Bytes ; output_audio
       naint.midi2voice-zh.Answer))
;; Define naint.midi2voice-zh.Answer access functions

;; Define naint.midi2voice-zh.Answer.output_audio
(: naint.midi2voice-zh.Answer.output_audio
   (-> naint.midi2voice-zh.Answer Bytes))

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;
;; singingZH ;;
;;;;;;;;;;;;;;;

;; Define naint.midi2voice-zh.singingZH service method
(: naint.midi2voice-zh.singingZH
   (-> naint.midi2voice-zh.Query naint.midi2voice-zh.Answer))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: sound_spleeter.proto
;; Protobuf syntax: proto3
;; Prefix: snet.sound-spleeter
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define snet.sound-spleeter.Input type
(: snet.sound-spleeter.Input Type)

;; Define snet.sound-spleeter.Input constuctor
(: snet.sound-spleeter.MkInput
   (-> String ; audio_url
       (-> Bytes ; audio
           snet.sound-spleeter.Input)))
;; Define snet.sound-spleeter.Input access functions

;; Define snet.sound-spleeter.Input.audio_url
(: snet.sound-spleeter.Input.audio_url
   (-> snet.sound-spleeter.Input String))

;; Define snet.sound-spleeter.Input.audio
(: snet.sound-spleeter.Input.audio
   (-> snet.sound-spleeter.Input Bytes))

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define snet.sound-spleeter.Output type
(: snet.sound-spleeter.Output Type)

;; Define snet.sound-spleeter.Output constuctor
(: snet.sound-spleeter.MkOutput
   (-> Bytes ; vocals
       (-> Bytes ; accomp
           snet.sound-spleeter.Output)))
;; Define snet.sound-spleeter.Output access functions

;; Define snet.sound-spleeter.Output.vocals
(: snet.sound-spleeter.Output.vocals
   (-> snet.sound-spleeter.Output Bytes))

;; Define snet.sound-spleeter.Output.accomp
(: snet.sound-spleeter.Output.accomp
   (-> snet.sound-spleeter.Output Bytes))

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; SoundSpleeter ;;
;;;;;;;;;;;;;;;;;;;

;; Define snet.sound-spleeter.spleeter service method
(: snet.sound-spleeter.spleeter
   (-> snet.sound-spleeter.Input snet.sound-spleeter.Output))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: asr.proto
;; Protobuf syntax: proto3
;; Protobuf package: asr
;; Prefix: snet.speech-recognition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define snet.speech-recognition.Audio type
(: snet.speech-recognition.Audio Type)

;; Define snet.speech-recognition.Audio constuctor
(: snet.speech-recognition.MkAudio
   (-> Bytes ; data
       snet.speech-recognition.Audio))
;; Define snet.speech-recognition.Audio access functions

;; Define snet.speech-recognition.Audio.data
(: snet.speech-recognition.Audio.data
   (-> snet.speech-recognition.Audio Bytes))

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define snet.speech-recognition.Text type
(: snet.speech-recognition.Text Type)

;; Define snet.speech-recognition.Text constuctor
(: snet.speech-recognition.MkText
   (-> String ; text
       snet.speech-recognition.Text))
;; Define snet.speech-recognition.Text access functions

;; Define snet.speech-recognition.Text.text
(: snet.speech-recognition.Text.text
   (-> snet.speech-recognition.Text String))

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; ASR ;;
;;;;;;;;;

;; Define snet.speech-recognition.s2t service method
(: snet.speech-recognition.s2t
   (-> snet.speech-recognition.Audio snet.speech-recognition.Text))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Handwrite missing services, ToMidi and Mixer ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; ToMidi ;;
;;;;;;;;;;;;

;; Input audio type
(: tomidi.Audio Type)
(: tomidi.MkAudio (-> Bytes ; data
                      tomidi.Audio))
(: tomidi.Audio.data (-> tomidi.Audio Bytes))

;; Output MIDI type
(: tomidi.MIDI Type)
(: tomidi.MkMIDI (-> Bytes ; data
                     tomidi.MIDI))
(: tomidi.MIDI.data (-> tomidi.MIDI Bytes))

;; Method
(: tomidi.a2m (-> tomidi.Audio tomidi.MIDI))

;;;;;;;;;;;
;; Mixer ;;
;;;;;;;;;;;

;; Input multi-audio type
(: mixer.MultiAudio Type)
(: mixer.MkMultiAudio (-> Bytes ; data1
                          (-> Bytes ; data2
                              mixer.MultiAudio)))
(: mixer.MultiAudio.data1 (-> mixer.MultiAudio Bytes))
(: mixer.MultiAudio.data2 (-> mixer.MultiAudio Bytes))

;; Output MIDI type
(: mixer.Audio Type)
(: mixer.MkAudio (-> Bytes ; data
                     mixer.Audio))
(: mixer.Audio.data (-> mixer.Audio Bytes))

;; Method
(: mixer.mix (-> mixer.MultiAudio mixer.Audio))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Other type definitions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Empty string
(: "" String)

;; English language string
(: "English" String)

;; Chinese language string
(: "Chinese" String)

;; Constant float 1.0
(: 1.0 Float)
