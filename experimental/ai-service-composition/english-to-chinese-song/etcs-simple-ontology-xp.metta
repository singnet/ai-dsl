;;;;;;;;;
;; Nat ;;
;;;;;;;;;

;; Define Nat
(: Nat Type)
(: Z Nat)
(: S (-> Nat Nat))

;; Define cast functions between Nat and Number
(: fromNumber (-> Number Nat))
(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))
(: fromNat (-> Nat Number))
(= (fromNat Z) 0)
(= (fromNat (S $k)) (+ 1 (fromNat $k)))

;;;;;;;;;;;;;;;;;;;;;
;; De Bruijn Index ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define DeBruijn type
(: DeBruijn Type)

;; Define DeBruijn constructors
(: z DeBruijn)                        ; Zero
(: s (-> DeBruijn DeBruijn))          ; Successor

;;;;;;;;;;
;; List ;;
;;;;;;;;;;

;; Declaration of List data type and constructors
(: List (-> $a Type))
(: Nil (List $a))
(: Cons (-> $a (List $a) (List $a)))

;;;;;;;;;;;;;;;;;;;;;
;; Match over list ;;
;;;;;;;;;;;;;;;;;;;;;

;; Similar to match but takes a list of terms instead of a space.
(: match' (-> (List Atom) $a $a $a))
(= (match' Nil $pattern $rewrite) (empty))
(= (match' (Cons $head $tail) $pattern $rewrite) (let $pattern $head $rewrite))
(= (match' (Cons $head $tail) $pattern $rewrite) (match' $tail $pattern $rewrite))

;; Test match' on empty list
!(assertEqualToResult
  (match' Nil ($x $y) ($y $x))
  ())

;; Test match' on singleton
!(assertEqual
  (match' (Cons (A B) Nil) ($x $y) ($y $x))
  (B A))

;; Test match' on pair
!(assertEqualToResult
  (match' (Cons (A B) (Cons (C D) Nil)) ($x $y) ($y $x))
  ((B A)
   (D C)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Knowledge and rule base ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

!(bind! &kb (new-space))

;;;;;;;;;;;;;;;
;; Subtyping ;;
;;;;;;;;;;;;;;;

;; Notations:
;;
;; 1. Variables in upper case, like `$T`, tend to correspond to types.
;; 2. Variables in lower case, like `$t`, tend to correspond to terms.
;; 3. In the rule names:
;; 3.1. ST stands for SubTyping,
;; 3.2. Refl for Reflexive,
;; 3.3. Trans for transitive,
;; 3.4. Cov for contravariant.

;; Subtyping is relexive
!(add-atom &kb (: STRefl (<: $T $T)))

;; Subtyping is transitive
!(add-atom &kb (: STTrans (-> (<: $S $T)
                              (-> (<: $T $U)
                                  (<: $S $U)))))

;; Subtyping of function types is contravariant over inputs and
;; covariant over outputs.
!(add-atom &kb (: STConv (-> (<: $T1 $S1)
                             (-> (<: $S2 $T2)
                                 (<: (-> $S1 $S2) (-> $T1 $T2))))))

;; Relationship between subtyping and type assume explicit coercion.
;; That is if a term `t` is of type `S` a subtype of `T`, then
;; `(coerce proof_S<:T t)` is of type `T`, where `proof_S<:T` is a
;; proof that `S` is a subtype of `T`.
!(add-atom &kb (: coerce (-> (<: $S $T)
                             (-> $S
                                 $T))))

;;;;;;;;;;;;;;
;; Ontology ;;
;;;;;;;;;;;;;;

;; The ontology tries to be based on existing ontologies when
;; possible.  See the following discussion for a list of ontologies
;;
;; https://github.com/singnet/ai-dsl/discussions/18

;; Language
!(add-atom &kb (: NS (<: NaturalLanguage String)))             ; SUMO

;; Text
!(add-atom &kb (: TS (<: Text String)))

;; URL
!(add-atom &kb (: US (<: UniformResourceLocator String)))      ; SUMO

;; MIDI
!(add-atom &kb (: MB (<: MusicalInstrumentDigitalInterface Bytes)))

;; Audio
!(add-atom &kb (: AB (<: Audio Bytes)))

;; TODO: for now we paste the content of
;; english-song-to-chinese-song-services.metta here because the import
;; operation imports the stdlib as well and let stdlib functions being
;; used as rules and axioms by the backward chainer.
;;
;; Also, for the sake of simplicity the names have been shorten by
;; removing the organization.  For instance
;;
;; naint.machine-translation.Input
;;
;; becomes
;;
;; machine-translation.Input
;;
;; Additionally, data constructors have been removed when possible,
;; instead methods takes multiple inputs.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Services involved in creating a composite service to turn English
;; singing into Chinese singing.
;;
;; The service specifications are obtained from the output of
;;
;; ./gen-snet-marketplace-metta.sh naint.machine-translation naint.midi2voice-zh snet.sound-spleeter snet.speech-recognition
;;
;; then curated to retain only the information about the type
;; signatures of service calls.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: translate.proto
;; Protobuf syntax: proto3
;; Prefix: naint.machine-translation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define machine-translation.translate service method
!(add-atom &kb (: machine-translation.translate
                  (-> NaturalLanguage
                      (-> NaturalLanguage
                          (-> UniformResourceLocator
                              Text)))))

;; We add an extra micro service to turn Text into a URL
!(add-atom &kb (: upload (-> Text UniformResourceLocator)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: singingZH.proto
;; Protobuf syntax: proto3
;; Protobuf package: singingZH
;; Prefix: midi2voice-zh
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define midi2voice-zh.singingZH service method
!(add-atom &kb (: midi2voice-zh.singingZH
                  (-> Text
                      (-> MusicalInstrumentDigitalInterface
                          Audio))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: sound_spleeter.proto
;; Protobuf syntax: proto3
;; Prefix: snet.sound-spleeter
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define sound-spleeter.Output type
!(add-atom &kb (: sound-spleeter.Output Type))

;; Define sound-spleeter.Output constuctor
!(add-atom &kb (: sound-spleeter.MkOutput
   (-> Audio ; vocals
       (-> Audio ; accomp
           sound-spleeter.Output))))
;; Define sound-spleeter.Output access functions

;; Define sound-spleeter.Output.vocals
!(add-atom &kb (: sound-spleeter.Output.vocals
   (-> sound-spleeter.Output Audio)))

;; Define sound-spleeter.Output.accomp
!(add-atom &kb (: sound-spleeter.Output.accomp
   (-> sound-spleeter.Output Audio)))

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; SoundSpleeter ;;
;;;;;;;;;;;;;;;;;;;

;; Define sound-spleeter.spleeter service method
!(add-atom &kb (: sound-spleeter.spleeter
                  (-> Audio
                      ;; We reuse the spleeter Output type to hold
                      ;; a pair of Audio
                      sound-spleeter.Output)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: asr.proto
;; Protobuf syntax: proto3
;; Protobuf package: asr
;; Prefix: speech-recognition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define speech-recognition.s2t service method
!(add-atom &kb (: speech-recognition.s2t (-> Audio Text)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Handwrite missing services, ToMidi and Mixer ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; ToMidi ;;
;;;;;;;;;;;;

;; Method
!(add-atom &kb (: tomidi.a2m (-> Audio MusicalInstrumentDigitalInterface)))

;;;;;;;;;;;
;; Mixer ;;
;;;;;;;;;;;

;; Method
!(add-atom &kb (: mixer.mix (-> Audio (-> Audio Audio))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Other type definitions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; English language string
!(add-atom &kb (: "English" NaturalLanguage))

;; Chinese language string
!(add-atom &kb (: "Chinese" NaturalLanguage))

;;;;;;;;;;;;;;;;;;;;;;
;; Backward chainer ;;
;;;;;;;;;;;;;;;;;;;;;;

;; The following code is copied from NEXT.

;; Curried Backward Chainer with lambda abstraction.  A lambda
;; abstraction is represented by
;;
;; (λ <INDEX> <BODY>)
;;
;; where <INDEX> is a De Bruijn index as define above, such as z or
;; (s z), and <BODY> is a term possibly containing <INDEX>.  Note
;; that the use of De Bruijn index in lambda abstraction is somewhat
;; unconventional here.  It differs from what is described in
;; https://en.wikipedia.org/wiki/De_Bruijn_index in three ways:
;;
;; 1. The index is explicitely attached to a λ by being its first
;;    argument.  For instance the lambda term λx.x, which would
;;    traditionally be represented by λ1 using De Bruijn index, would
;;    be represented here by the MeTTa term (λ z z).
;;
;; 2. As seen in the example above the index here starts at 0,
;;    represented by z, instead of 1.
;;
;; 3. The index increases as the lambda abstraction gets deeper.  For
;;    instance λx.λy.x, which would traditionally be represented by
;;    λλ2 using De Bruijn index, is represented here by the MeTTa term
;;    (λ z (λ (s z) z).
;;
;; This differences are due to the way the proof abstraction recursive
;; step is defined in the bc, as well as the need for having non
;; overlapping pattern matching between the two recursive steps.
;; Specifically, if λ had only one argument, then (λ <BODY>) would
;; overlap with (<ABS> <ARG>).  Having λ take 2 arguments instead of 1
;; has the disadvantage of making lambda abstraction not as compact.
;; On the flip side, the benefit is that the scope of an index is
;; easier to track.
;;
;; The arguments of the backward chainer are:
;;
;; * Knowledge base: pointer to a space containing axioms and rules in
;;   the format (: <NAME> <RULE>).  Note that rules are explicitely
;;   curried, meaning that a rule with two premises is represented by
;;
;;   (: <NAME> (-> <PREMISE1> (-> <PREMISE2> <CONCLUSION>)))
;;
;; * Environment: a list of typing relationship between De Bruijn
;;   index and type, such as
;;
;;   (Cons (: z String) (Cons (: (s z) Number) Nil))
;;
;; * De Bruijn Index: De Bruijn Index to use if a lambda abstraction
;;   is introduced.
;;
;; * Maximum depth: maximum depth of the generated proof tree.
;;
;; * Query: a metta term of the form (: <PROOF> <THEOREM>) where
;;   <PROOF> and <THEOREM> may contain free variables that may be
;;   filled by the backward chainer.  Note that for arguments of
;;   applications must be type annotated (unknowns types are of course
;;   allowed).  For instance the following query
;;
;;   (: (ModusPonens ab) $thrm)
;;
;;   would not work, instead one needs to provide
;;
;;   (: (ModusPonens (: ab $lemma)) $thrm)
;;
;; A result is the query with its variables grounded, fully or
;; partially.  If multiple results are possible, they are returned as
;; a superposition.
;;
;; As explained, the proof arguments must be type annotated.  Without
;; such type annotation, lambda abstraction sometimes leads to
;; incorrect results.  It is suspected to come from the fact that
;; otherwise the proof application recursive step loses bindings about
;; the premise.  Having annotated proof is however a good thing, to
;; display a proof tree and to have an indepth view into the proof.
;; In order to remove (resp. add) type annotation one can use
;; remove-type (resp. add-type).
(: bc (-> $a                            ; Knowledge base space
          $b                            ; Environment
          DeBruijn                      ; De Bruijn Index
          Nat                           ; Maximum depth
          $c                            ; Query
          $c))                          ; Result

;; Base cases

;; Match the knowledge base for a typing relationship
(= (bc $kb $env $idx $_ (: $prf $thrm))
   (match $kb (: $prf $thrm) (: $prf $thrm)))
;; Match the environment for a typing relationship
(= (bc $kb $env $idx $_ (: $prf $thrm))
   (match' $env (: $prf $thrm) (: $prf $thrm)))

;; Recursive steps

;; Proof application
(= (bc $kb $env $idx (S $k) (: ($prfabs (: $prfarg $prms)) $thrm))
   (let* (((: $prfabs (-> $prms $thrm))
           (bc $kb $env $idx $k (: $prfabs (-> $prms $thrm))))
          ((: $prfarg $prms)
           (bc $kb $env $idx $k (: $prfarg $prms))))
     (: ($prfabs (: $prfarg $prms)) $thrm)))
;; Proof abstraction
(= (bc $kb $env $idx (S $k) (: (λ $idx $prfbdy) (-> $prms $thrm)))
   (let (: $prfbdy $thrm)
     (bc $kb (Cons (: $idx $prms) $env) (s $idx) $k (: $prfbdy $thrm))
     (: (λ $idx $prfbdy) (-> $prms $thrm))))

;;;;;;;;;;;;;;;;;;;;;
;; Remove/add type ;;
;;;;;;;;;;;;;;;;;;;;;

;; Remove type annotations from a query.
;;
;; For instance
;;
;; (remove-type (: ((ModusPonens (: ab (→ A B))) (: a A)) B))
;;
;; outputs
;;
;; ((ModusPonens ab) a)
(: remove-type (-> $a $a))
(= (remove-type $term)
   (case (get-metatype $term)
     ((Symbol $term)
      (Grounded $term)
      (Variable $term)
      (Expression (case $term
                    ;; Only covers up to trinary expression because
                    ;; for now the bc is not supposed to generate
                    ;; n-ary expression where n is greater 3.
                    ((() ())
                     (($x) ((remove-type $x)))
                     (($x $y) ((remove-type $x) (remove-type $y)))
                     (($x $y $z) (if (== $x :)
                                     (remove-type $y)
                                     ((remove-type $x) (remove-type $y) (remove-type $z))))
                     ($_ $_)))))))

;; Add type missing annotation to be compatible with bc query format.
;; Whatever is missing is only added as variables, not inferred, for
;; that one may use the bc.  Note that the first annotation must be
;; provided manually
;;
;; For instance
;;
;; (add-type ((ModusPonens ab) a))
;;
;; only outputs
;;
;; ((ModusPonens (: ab $t#1)) (: a $t#2))
;;
;; not
;;
;; (: ((ModusPonens (: ab $t#1)) (: a $t#2)) $t#3)
;;
;; That is because add-type can only detect application, that is a
;; term of the form (<ABS> <ARG>) to add the type annotation to <ARG>.
(: add-type (-> $a $a))
(= (add-type $term)
   (case (get-metatype $term)
     ((Symbol $term)
      (Grounded $term)
      (Variable $term)
      (Expression (case $term
                    ((() ())
                     (($x) ($x))
                     (($x $y) (if (== $x s)
                                  ;; Treat De Bruijn index atomically
                                  $term
                                  ;; Add type annotation to argument of application
                                  (let $νx (add-type $x) ($νx (: (add-type $y) $t)))))
                     (($x $y $z) (if (== $x :)
                                     ;; Already a type annotation, recurse only on $y
                                     (: (add-type $y) $z)
                                     (if (== $x λ)
                                         ;; Recurse only on body of lambda abstraction
                                         (λ $y (add-type $z))
                                         $term)))
                     ($_ $_)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa to λ-calculus ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; The following code is borrowed from calculi-converter.metta in the
;; chaining repository.

;; Convert metta to lambda calculus with De Bruijn indices.  It takes
;; in arguments
;;
;; 1. De Bruijn index to use for the next abstraction
;;
;; 2. MeTTa term.  Built-in operators such as let must be previously
;;    converted into LET to avoid spontaneous reduction.  NEXT: maybe
;;    we actually don't.
(: mt2lc (-> DeBruijn Atom Atom))
(= (mt2lc $idx $term)
   (case (get-metatype $term)
     ((Symbol $term)
      (Grounded $term)
      (Variable $term)
      (Expression (case $term
                    (;; Empty
                     (() ())
                     ;; LET
                     ((LET $x $y $f) (let* (($x $idx)
                                            ($νf (mt2lc (s $idx) $f))
                                            ($νy (mt2lc $idx $y)))
                                       ((λ $x $νf) $νy)))
                     ;; Application
                     (($f $x) ((mt2lc $idx $f) (mt2lc $idx $x)))
                     ;; Other
                     ($term $term)))))))

;;;;;;;;;;
;; Test ;;
;;;;;;;;;;

;; The following MeTTa program represents the AI service composition
;; for the English to Chinese song translation.
;;
;; (= (english-song-to-chinese-song $input)
;;    (let* (($spleeter-output (sound-spleeter.spleeter $input))
;;           ($english-vocals (sound-spleeter.Output.vocals $spleeter-output))
;;           ($chinese-lyrics (((machine-translation.translate "English") "Chinese")
;;                             (upload (speech-recognition.s2t $english-vocals)))))
;;      ((mixer.mix
;;        (sound-spleeter.Output.accomp $spleeter-output))
;;       ((midi2voice-zh.singingZH $chinese-lyrics) (tomidi.a2m $english-vocals)))))

;; The following MeTTa program represents the AI service composition
;; for the English to Chinese song translation, but uses let instead
;; of let*.
;;
;; (= (english-song-to-chinese-song $input)
;;    (let $spleeter-output (sound-spleeter.spleeter $input)
;;      (let $english-vocals (sound-spleeter.Output.vocals $spleeter-output)
;;        (let $chinese-lyrics (((machine-translation.translate "English") "Chinese")
;;                              (upload (speech-recognition.s2t $english-vocals)))
;;          ((mixer.mix
;;            (sound-spleeter.Output.accomp $spleeter-output))
;;           ((midi2voice-zh.singingZH $chinese-lyrics) (tomidi.a2m $english-vocals)))))))

;; Note that the program above can reduced by the MeTTa interpreter to
;;
;; (= (english-song-to-chinese-song $input)
;;    ((mixer.mix
;;      (sound-spleeter.Output.accomp
;;       (sound-spleeter.spleeter $input)))
;;     ((midi2voice-zh.singingZH
;;       (((machine-translation.translate "English") "Chinese")
;;        (upload
;;         (speech-recognition.s2t
;;          (sound-spleeter.Output.vocals
;;           (sound-spleeter.spleeter $input))))))
;;      (tomidi.a2m (sound-spleeter.Output.vocals (sound-spleeter.spleeter $input))))))
;;
;; The problem is that sound-spleeter.spleeter is now called 3 times
;; instead of once.  This could addressed by using a process calculus
;; like ρ-calculus instead of λ-calculus.

;; The following lambda term has been obtained by converting MeTTa to
;; lambda-calculus as follow
;;
;; !(mt2lc (s z)
;;         (LET $spleeter-output (sound-spleeter.spleeter $input)
;;           (LET $english-vocals (sound-spleeter.Output.vocals $spleeter-output)
;;             (LET $chinese-lyrics (((machine-translation.translate "English") "Chinese")
;;                                   (upload (speech-recognition.s2t $english-vocals)))
;;               ((mixer.mix
;;                 (sound-spleeter.Output.accomp $spleeter-output))
;;                ((midi2voice-zh.singingZH $chinese-lyrics) (tomidi.a2m $english-vocals)))))))
;;
;; and wrapping $input into a lambda abstraction using z as its
;; corresponding De Bruijn index, which gives us
;;
;; (λ z
;;   ((λ (s z)
;;      ((λ (s (s z))
;;         ((λ (s (s (s z)))
;;            ((mixer.mix
;;              (sound-spleeter.Output.accomp (s z)))
;;             ((midi2voice-zh.singingZH (s (s (s z))))
;;              (tomidi.a2m (s (s z))))))
;;          (((machine-translation.translate "English") "Chinese")
;;           (upload (speech-recognition.s2t (s (s z)))))))
;;       (sound-spleeter.Output.vocals (s z))))
;;    (sound-spleeter.spleeter z)))

;; The we add type annotations, as it required by the backward
;; chainer, by calling add-type as follows
;;
;; !(add-type
;;   (λ z
;;     ((λ (s z)
;;        ((λ (s (s z))
;;           ((λ (s (s (s z)))
;;              ((mixer.mix
;;                (sound-spleeter.Output.accomp (s z)))
;;               ((midi2voice-zh.singingZH (s (s (s z))))
;;                (tomidi.a2m (s (s z))))))
;;            (((machine-translation.translate "English") "Chinese")
;;             (upload (speech-recognition.s2t (s (s z)))))))
;;         (sound-spleeter.Output.vocals (s z))))
;;      (sound-spleeter.spleeter z))))
;;
;; which gives us
;;
;; (λ z
;;   ((λ (s z)
;;      ((λ (s (s z))
;;         ((λ (s (s (s z)))
;;            ((mixer.mix
;;              (: (sound-spleeter.Output.accomp (: (s z) $t#946326)) $t#932085))
;;             (: ((midi2voice-zh.singingZH (: (s (s (s z))) $t#995065))
;;                 (: (tomidi.a2m (: (s (s z)) $t#1028590)) $t#976891)) $t#911331)))
;;          (: (((machine-translation.translate (: "English" $t#1107114)) (: "Chinese" $t#1098324))
;;              (: (upload (: (speech-recognition.s2t (: (s (s z))
;;                                                       $t#1149569))
;;                            $t#1133777)) $t#1083952)) $t#828927)))
;;       (: (sound-spleeter.Output.vocals (: (s z) $t#1284211)) $t#678772)))
;;    (: (sound-spleeter.spleeter (: z $t#1707943)) $t#363530)))

;; Type check the totality of the English to Chinese singing AI
;; service composition.  Note that no coercion is required with such
;; simple ontology.
!(assertEqual
  (bc &kb Nil z (fromNumber 10)
      (: (λ z
           ((λ (s z)
              ((λ (s (s z))
                 ((λ (s (s (s z)))
                    ((mixer.mix
                      (: (sound-spleeter.Output.accomp
                          (: (s z) $t946326)) $t932085))
                     (: ((midi2voice-zh.singingZH
                          (: (s (s (s z))) $t995065))
                         (: (tomidi.a2m (: (s (s z)) $t1028590))
                            $t976891)) $t911331)))
                  (: (((machine-translation.translate
                        (: "English" $t1107114))
                       (: "Chinese" $t1098324))
                      (: (upload
                          (: (speech-recognition.s2t (: (s (s z))
                                                        $t1149569))
                             $t1133777)) $t1083952)) $t828927)))
               (: (sound-spleeter.Output.vocals (: (s z) $t1284211)) $t678772)))
            (: (sound-spleeter.spleeter (: z $t1707943)) $t363530)))
         (-> Audio Audio)))
  (: (λ z
       ((λ (s z)
          ((λ (s (s z))
             ((λ (s (s (s z)))
                ((mixer.mix
                  (: (sound-spleeter.Output.accomp
                      (: (s z) sound-spleeter.Output)) Audio))
                 (: ((midi2voice-zh.singingZH (: (s (s (s z))) Text))
                     (: (tomidi.a2m (: (s (s z)) Audio))
                        MusicalInstrumentDigitalInterface))
                    Audio)))
              (: (((machine-translation.translate
                    (: "English" NaturalLanguage))
                   (: "Chinese" NaturalLanguage))
                  (: (upload
                      (: (speech-recognition.s2t
                          (: (s (s z)) Audio)) Text))
                     UniformResourceLocator)) Text)))
           (: (sound-spleeter.Output.vocals
               (: (s z) sound-spleeter.Output)) Audio)))
        (: (sound-spleeter.spleeter
            (: z Audio)) sound-spleeter.Output)))
     (-> Audio Audio)))
