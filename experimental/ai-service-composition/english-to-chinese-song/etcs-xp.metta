;;;;;;;;;
;; Nat ;;
;;;;;;;;;

;; Define Nat
(: Nat Type)
(: Z Nat)
(: S (-> Nat Nat))

;; Define cast functions between Nat and Number
(: fromNumber (-> Number Nat))
(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))
(: fromNat (-> Nat Number))
(= (fromNat Z) 0)
(= (fromNat (S $k)) (+ 1 (fromNat $k)))

;;;;;;;;;;;;;;;;;;;;;
;; De Bruijn Index ;;
;;;;;;;;;;;;;;;;;;;;;

;; Define DeBruijn type
(: DeBruijn Type)

;; Define DeBruijn constructors
(: z DeBruijn)                        ; Zero
(: s (-> DeBruijn DeBruijn))          ; Successor

;;;;;;;;;;
;; List ;;
;;;;;;;;;;

;; Declaration of List data type and constructors
(: List (-> $a Type))
(: Nil (List $a))
(: Cons (-> $a (List $a) (List $a)))

;;;;;;;;;;;;;;;;;;;;;
;; Match over list ;;
;;;;;;;;;;;;;;;;;;;;;

;; Similar to match but takes a list of terms instead of a space.
(: match' (-> (List Atom) $a $a $a))
(= (match' Nil $pattern $rewrite) (empty))
(= (match' (Cons $head $tail) $pattern $rewrite) (let $pattern $head $rewrite))
(= (match' (Cons $head $tail) $pattern $rewrite) (match' $tail $pattern $rewrite))

;; Test match' on empty list
!(assertEqualToResult
  (match' Nil ($x $y) ($y $x))
  ())

;; Test match' on singleton
!(assertEqual
  (match' (Cons (A B) Nil) ($x $y) ($y $x))
  (B A))

;; Test match' on pair
!(assertEqualToResult
  (match' (Cons (A B) (Cons (C D) Nil)) ($x $y) ($y $x))
  ((B A)
   (D C)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Knowledge and rule base ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; TODO: for now we paste the content of
;; english-song-to-chinese-song-services.metta here because the import
;; operation imports the stdlib as well and let stdlib functions being
;; used as rules and axioms by the backward chainer.
;;
;; Also, for the sake of simplicity the names have been shorten by
;; removing the organization.  For instance
;;
;; naint.machine-translation.Input
;;
;; becomes
;;
;; machine-translation.Input

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Services involved in creating a composite service to turn English
;; singing into Chinese singing.
;;
;; The service specifications are obtained from the output of
;;
;; ./gen-snet-marketplace-metta.sh naint.machine-translation naint.midi2voice-zh snet.sound-spleeter snet.speech-recognition
;;
;; then curated to retain only the information about the type
;; signatures of service calls.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: translate.proto
;; Protobuf syntax: proto3
;; Prefix: naint.machine-translation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

!(bind! &kb (new-space))

;; Define machine-translation.Input type
!(add-atom &kb (: machine-translation.Input Type))

;; Define machine-translation.Input constuctor
!(add-atom &kb (: machine-translation.MkInput
   (-> String ; source_lang
       (-> String ; target_lang
           (-> String ; sentences_url
               machine-translation.Input)))))
;; Define machine-translation.Input access functions

;; Define machine-translation.Input.source_lang
!(add-atom &kb (: machine-translation.Input.source_lang
   (-> machine-translation.Input String)))

;; Define machine-translation.Input.target_lang
!(add-atom &kb (: machine-translation.Input.target_lang
   (-> machine-translation.Input String)))

;; Define machine-translation.Input.sentences_url
!(add-atom &kb (: machine-translation.Input.sentences_url
   (-> machine-translation.Input String)))

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define machine-translation.Output type
!(add-atom &kb (: machine-translation.Output Type))

;; Define machine-translation.Output constuctor
!(add-atom &kb (: machine-translation.MkOutput
   (-> String ; translation
       machine-translation.Output)))
;; Define machine-translation.Output access functions

;; Define machine-translation.Output.translation
!(add-atom &kb (: machine-translation.Output.translation
   (-> machine-translation.Output String)))

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; RomanceTranslator ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; Define machine-translation.translate service method
!(add-atom &kb (: machine-translation.translate
   (-> machine-translation.Input machine-translation.Output)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: singingZH.proto
;; Protobuf syntax: proto3
;; Protobuf package: singingZH
;; Prefix: midi2voice-zh
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Query ;;
;;;;;;;;;;;

;; Define midi2voice-zh.Query type
!(add-atom &kb (: midi2voice-zh.Query Type))

;; Define midi2voice-zh.Query constuctor
!(add-atom &kb (: midi2voice-zh.MkQuery
   (-> String ; text
       (-> Bytes ; midi_file
           (-> Float ; normalize
               midi2voice-zh.Query)))))
;; Define midi2voice-zh.Query access functions

;; Define midi2voice-zh.Query.text
!(add-atom &kb (: midi2voice-zh.Query.text
   (-> midi2voice-zh.Query String)))

;; Define midi2voice-zh.Query.midi_file
!(add-atom &kb (: midi2voice-zh.Query.midi_file
   (-> midi2voice-zh.Query Bytes)))

;; Define midi2voice-zh.Query.normalize
!(add-atom &kb (: midi2voice-zh.Query.normalize
   (-> midi2voice-zh.Query Float)))

;;;;;;;;;;;;
;; Answer ;;
;;;;;;;;;;;;

;; Define midi2voice-zh.Answer type
!(add-atom &kb (: midi2voice-zh.Answer Type))

;; Define midi2voice-zh.Answer constuctor
!(add-atom &kb (: midi2voice-zh.MkAnswer
   (-> Bytes ; output_audio
       midi2voice-zh.Answer)))
;; Define midi2voice-zh.Answer access functions

;; Define midi2voice-zh.Answer.output_audio
!(add-atom &kb (: midi2voice-zh.Answer.output_audio
   (-> midi2voice-zh.Answer Bytes)))

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;
;; singingZH ;;
;;;;;;;;;;;;;;;

;; Define midi2voice-zh.singingZH service method
!(add-atom &kb (: midi2voice-zh.singingZH
   (-> midi2voice-zh.Query midi2voice-zh.Answer)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: sound_spleeter.proto
;; Protobuf syntax: proto3
;; Prefix: snet.sound-spleeter
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Input ;;
;;;;;;;;;;;

;; Define sound-spleeter.Input type
!(add-atom &kb (: sound-spleeter.Input Type))

;; Define sound-spleeter.Input constuctor
!(add-atom &kb (: sound-spleeter.MkInput
   (-> String ; audio_url
       (-> Bytes ; audio
           sound-spleeter.Input))))
;; Define sound-spleeter.Input access functions

;; Define sound-spleeter.Input.audio_url
!(add-atom &kb (: sound-spleeter.Input.audio_url
   (-> sound-spleeter.Input String)))

;; Define sound-spleeter.Input.audio
!(add-atom &kb (: sound-spleeter.Input.audio
   (-> sound-spleeter.Input Bytes)))

;;;;;;;;;;;;
;; Output ;;
;;;;;;;;;;;;

;; Define sound-spleeter.Output type
!(add-atom &kb (: sound-spleeter.Output Type))

;; Define sound-spleeter.Output constuctor
!(add-atom &kb (: sound-spleeter.MkOutput
   (-> Bytes ; vocals
       (-> Bytes ; accomp
           sound-spleeter.Output))))
;; Define sound-spleeter.Output access functions

;; Define sound-spleeter.Output.vocals
!(add-atom &kb (: sound-spleeter.Output.vocals
   (-> sound-spleeter.Output Bytes)))

;; Define sound-spleeter.Output.accomp
!(add-atom &kb (: sound-spleeter.Output.accomp
   (-> sound-spleeter.Output Bytes)))

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; SoundSpleeter ;;
;;;;;;;;;;;;;;;;;;;

;; Define sound-spleeter.spleeter service method
!(add-atom &kb (: sound-spleeter.spleeter
   (-> sound-spleeter.Input sound-spleeter.Output)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa representation, generated by protobuf-metta
;;
;; Protobuf file: asr.proto
;; Protobuf syntax: proto3
;; Protobuf package: asr
;; Prefix: speech-recognition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; Message Types ;;
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;
;; Audio ;;
;;;;;;;;;;;

;; Define speech-recognition.Audio type
!(add-atom &kb (: speech-recognition.Audio Type))

;; Define speech-recognition.Audio constuctor
!(add-atom &kb (: speech-recognition.MkAudio
   (-> Bytes ; data
       speech-recognition.Audio)))
;; Define speech-recognition.Audio access functions

;; Define speech-recognition.Audio.data
!(add-atom &kb (: speech-recognition.Audio.data
   (-> speech-recognition.Audio Bytes)))

;;;;;;;;;;
;; Text ;;
;;;;;;;;;;

;; Define speech-recognition.Text type
!(add-atom &kb (: speech-recognition.Text Type))

;; Define speech-recognition.Text constuctor
!(add-atom &kb (: speech-recognition.MkText
   (-> String ; text
       speech-recognition.Text)))
;; Define speech-recognition.Text access functions

;; Define speech-recognition.Text.text
!(add-atom &kb (: speech-recognition.Text.text
   (-> speech-recognition.Text String)))

;;;;;;;;;;;;;;
;; Services ;;
;;;;;;;;;;;;;;

;;;;;;;;;
;; ASR ;;
;;;;;;;;;

;; Define speech-recognition.s2t service method
!(add-atom &kb (: speech-recognition.s2t
   (-> speech-recognition.Audio speech-recognition.Text)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Handwrite missing services, ToMidi and Mixer ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; ToMidi ;;
;;;;;;;;;;;;

;; Input audio type
!(add-atom &kb (: tomidi.Audio Type))
!(add-atom &kb (: tomidi.MkAudio (-> Bytes ; data
                      tomidi.Audio)))
!(add-atom &kb (: tomidi.Audio.data (-> tomidi.Audio Bytes)))

;; Output MIDI type
!(add-atom &kb (: tomidi.MIDI Type))
!(add-atom &kb (: tomidi.MkMIDI (-> Bytes ; data
                     tomidi.MIDI)))
!(add-atom &kb (: tomidi.MIDI.data (-> tomidi.MIDI Bytes)))

;; Method
!(add-atom &kb (: tomidi.a2m (-> tomidi.Audio tomidi.MIDI)))

;;;;;;;;;;;
;; Mixer ;;
;;;;;;;;;;;

;; Input multi-audio type
!(add-atom &kb (: mixer.MultiAudio Type))
!(add-atom &kb (: mixer.MkMultiAudio (-> Bytes ; data1
                          (-> Bytes ; data2
                              mixer.MultiAudio))))
!(add-atom &kb (: mixer.MultiAudio.data1 (-> mixer.MultiAudio Bytes)))
!(add-atom &kb (: mixer.MultiAudio.data2 (-> mixer.MultiAudio Bytes)))

;; Output MIDI type
!(add-atom &kb (: mixer.Audio Type))
!(add-atom &kb (: mixer.MkAudio (-> Bytes ; data
                     mixer.Audio)))
!(add-atom &kb (: mixer.Audio.data (-> mixer.Audio Bytes)))

;; Method
!(add-atom &kb (: mixer.mix (-> mixer.MultiAudio mixer.Audio)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Other type definitions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Empty string
!(add-atom &kb (: "" String))

;; English language string
!(add-atom &kb (: "English" String))

;; Chinese language string
!(add-atom &kb (: "Chinese" String))

;; Constant float 1.0
!(add-atom &kb (: 1.0 Float))

;;;;;;;;;;;;;;;;;;;;;;
;; Backward chainer ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Curried Backward Chainer with lambda abstraction.  A lambda
;; abstraction is represented by
;;
;; (λ <INDEX> <BODY>)
;;
;; where <INDEX> is a De Bruijn index as define above, such as z or
;; (s z), and <BODY> is a term possibly containing <INDEX>.  Note
;; that the use of De Bruijn index in lambda abstraction is somewhat
;; unconventional here.  It differs from what is described in
;; https://en.wikipedia.org/wiki/De_Bruijn_index in three ways:
;;
;; 1. The index is explicitely attached to a λ by being its first
;;    argument.  For instance the lambda term λx.x, which would
;;    traditionally be represented by λ1 using De Bruijn index, would
;;    be represented here by the MeTTa term (λ z z).
;;
;; 2. As seen in the example above the index here starts at 0,
;;    represented by z, instead of 1.
;;
;; 3. The index increases as the lambda abstraction gets deeper.  For
;;    instance λx.λy.x, which would traditionally be represented by
;;    λλ2 using De Bruijn index, is represented here by the MeTTa term
;;    (λ z (λ (s z) z).
;;
;; This differences are due to the way the proof abstraction recursive
;; step is defined in the bc, as well as the need for having non
;; overlapping pattern matching between the two recursive steps.
;; Specifically, if λ had only one argument, then (λ <BODY>) would
;; overlap with (<ABS> <ARG>).  Having λ take 2 arguments instead of 1
;; has the disadvantage of making lambda abstraction not as compact.
;; On the flip side, the benefit is that the scope of an index is
;; easier to track.
;;
;; The arguments of the backward chainer are:
;;
;; * Knowledge base: pointer to a space containing axioms and rules in
;;   the format (: <NAME> <RULE>).  Note that rules are explicitely
;;   curried, meaning that a rule with two premises is represented by
;;
;;   (: <NAME> (-> <PREMISE1> (-> <PREMISE2> <CONCLUSION>)))
;;
;; * Environment: a list of typing relationship between De Bruijn
;;   index and type, such as
;;
;;   (Cons (: z String) (Cons (: (s z) Number) Nil))
;;
;; * De Bruijn Index: De Bruijn Index to use if a lambda abstraction
;;   is introduced.
;;
;; * Maximum depth: maximum depth of the generated proof tree.
;;
;; * Query: a metta term of the form (: <PROOF> <THEOREM>) where
;;   <PROOF> and <THEOREM> may contain free variables that may be
;;   filled by the backward chainer.  Note that for arguments of
;;   applications must be type annotated (unknowns types are of course
;;   allowed).  For instance the following query
;;
;;   (: (ModusPonens ab) $thrm)
;;
;;   would not work, instead one needs to provide
;;
;;   (: (ModusPonens (: ab $lemma)) $thrm)
;;
;; A result is the query with its variables grounded, fully or
;; partially.  If multiple results are possible, they are returned as
;; a superposition.
;;
;; As explained, the proof arguments must be type annotated.  Without
;; such type annotation, lambda abstraction sometimes leads to
;; incorrect results.  It is suspected to come from the fact that
;; otherwise the proof application recursive step loses bindings about
;; the premise.  Having annotated proof is however a good thing, to
;; display a proof tree and to have an indepth view into the proof.
;; In order to remove (resp. add) type annotation one can use
;; remove-type (resp. add-type).
(: bc (-> $a                            ; Knowledge base space
          $b                            ; Environment
          DeBruijn                      ; De Bruijn Index
          Nat                           ; Maximum depth
          $c                            ; Query
          $c))                          ; Result

;; Base cases

;; Match the knowledge base
(= (bc $kb $env $idx $_ (: $prf $thrm))
   (match $kb (: $prf $thrm) (: $prf $thrm)))
;; Match the environment
(= (bc $kb $env $idx $_ (: $prf $thrm))
   (match' $env (: $prf $thrm) (: $prf $thrm)))

;; Recursive steps

;; Proof application
(= (bc $kb $env $idx (S $k) (: ($prfabs (: $prfarg $prms)) $thrm))
   (let* (((: $prfabs (-> $prms $thrm))
           (bc $kb $env $idx $k (: $prfabs (-> $prms $thrm))))
          ((: $prfarg $prms)
           (bc $kb $env $idx $k (: $prfarg $prms))))
     (: ($prfabs (: $prfarg $prms)) $thrm)))
;; Proof abstraction
(= (bc $kb $env $idx (S $k) (: (λ $idx $prfbdy) (-> $prms $thrm)))
   (let (: $prfbdy $thrm)
     (bc $kb (Cons (: $idx $prms) $env) (s $idx) $k (: $prfbdy $thrm))
     (: (λ $idx $prfbdy) (-> $prms $thrm))))

;;;;;;;;;;;;;;;;;;;;;
;; Remove/add type ;;
;;;;;;;;;;;;;;;;;;;;;

;; Remove type annotations from a query.
;;
;; For instance
;;
;; (remove-type (: ((ModusPonens (: ab (→ A B))) (: a A)) B))
;;
;; outputs
;;
;; ((ModusPonens ab) a)
(: remove-type (-> $a $a))
(= (remove-type $term)
   (case (get-metatype $term)
     ((Symbol $term)
      (Grounded $term)
      (Variable $term)
      (Expression (case $term
                    ;; Only covers up to trinary expression because
                    ;; for now the bc is not supposed to generate
                    ;; n-ary expression where n is greater 3.
                    ((() ())
                     (($x) ((remove-type $x)))
                     (($x $y) ((remove-type $x) (remove-type $y)))
                     (($x $y $z) (if (== $x :)
                                     (remove-type $y)
                                     ((remove-type $x) (remove-type $y) (remove-type $z))))
                     ($_ $_)))))))

;; Add type missing annotation to be compatible with bc query format.
;; Whatever is missing is only added as variables, not inferred, for
;; that one may use the bc.  Note that the first annotation must be
;; provided manually
;;
;; For instance
;;
;; (add-type ((ModusPonens ab) a))
;;
;; only outputs
;;
;; ((ModusPonens (: ab $t#1)) (: a $t#2))
;;
;; not
;;
;; (: ((ModusPonens (: ab $t#1)) (: a $t#2)) $t#3)
;;
;; That is because add-type can only detect application, that is a
;; term of the form (<ABS> <ARG>) to add the type annotation to <ARG>.
(: add-type (-> $a $a))
(= (add-type $term)
   (case (get-metatype $term)
     ((Symbol $term)
      (Grounded $term)
      (Variable $term)
      (Expression (case $term
                    ((() ())
                     (($x) ($x))
                     (($x $y) (if (== $x s)
                                  ;; Treat De Bruijn index atomically
                                  $term
                                  ;; Add type annotation to argument of application
                                  (let $νx (add-type $x) ($νx (: (add-type $y) $t)))))
                     (($x $y $z) (if (== $x :)
                                     ;; Already a type annotation, recurse only on $y
                                     (: (add-type $y) $z)
                                     (if (== $x λ)
                                         ;; Recurse only on body of lambda abstraction
                                         (λ $y (add-type $z))
                                         $term)))
                     ($_ $_)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;
;; MeTTa to λ-calculus ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; The following code is borrowed from calculi-converter.metta in the
;; chaining repository.

;; Convert metta to lambda calculus with De Bruijn indices.  It takes
;; in arguments
;;
;; 1. De Bruijn index to use for the next abstraction
;;
;; 2. MeTTa term.  Built-in operators such as let must be previously
;;    converted into LET to avoid spontaneous reduction.  NEXT: maybe
;;    we actually don't.
(: mt2lc (-> DeBruijn Atom Atom))
(= (mt2lc $idx $term)
   (case (get-metatype $term)
     ((Symbol $term)
      (Grounded $term)
      (Variable $term)
      (Expression (case $term
                    (;; Empty
                     (() ())
                     ;; LET
                     ((LET $x $y $f) (let* (($x $idx)
                                            ($νf (mt2lc (s $idx) $f))
                                            ($νy (mt2lc $idx $y)))
                                       ((λ $x $νf) $νy)))
                     ;; Application
                     (($f $x) ((mt2lc $idx $f) (mt2lc $idx $x)))
                     ;; Other
                     ($term $term)))))))

;;;;;;;;;;
;; Test ;;
;;;;;;;;;;

;; ;; Look for a program that takes a source_lang as String, a
;; ;; target_lang as String, a sentences_url as String and returns a
;; ;; machine-translation.Input.
;; !(assertEqual
;;   (bc &kb Nil z (fromNumber 0)
;;       (: $prg
;;          (-> String (-> String (-> String machine-translation.Input)))))
;;   (: machine-translation.MkInput
;;      (-> String (-> String (-> String machine-translation.Input)))))

;; ;; Look for a program that takes au audio stream as Bytes, supposed to
;; ;; be English singing, and return an audio stream as Bytes, supposed
;; ;; to be Chinese singing.
;; Disable because it takes too long
;; !(bc &kb Nil z (fromNumber 3) (: $prf (-> Bytes Bytes)))

;; Cannot use assertEqual due to the need for alpha-equivalence (which
;; has been implemented in the combinatory logic experiment in the
;; chaining repository but takes too long to run).
;;
;; TODO: re-enable once Minimal MeTTa is faster.
;;
;; !(add-type (: (λ z ((λ (s z) ((λ (s (s z)) ((λ (s (s (s z))) ((λ (s (s (s (s z)))) ((λ (s (s (s (s (s z))))) (mixer.Audio.data (mixer.mix ((mixer.MkMultiAudio (sound-spleeter.Output.accomp (s z))) (s (s (s (s (s z))))))))) (midi2voice-zh.Answer.output_audio (midi2voice-zh.singingZH (((midi2voice-zh.MkQuery (s (s (s z)))) (s (s (s (s z))))) 1.0))))) (tomidi.MIDI.data (tomidi.a2m (tomidi.MkAudio (s (s z))))))) (machine-translation.Output.translation (machine-translation.translate (((machine-translation.MkInput "English") "Chinese") (speech-recognition.Text.text (speech-recognition.s2t (speech-recognition.MkAudio (s (s z)))))))))) (sound-spleeter.Output.vocals (s z)))) (sound-spleeter.spleeter ((sound-spleeter.MkInput "") z)))) (-> Bytes Bytes)))

;; The following MeTTa program represents the AI service composition
;; for the English to Chinese song translation.
;;
;; (= (english-song-to-chinese-song $input)
;;    (let* (($spleeter-output (sound-spleeter.spleeter ((sound-spleeter.MkInput "") $input)))
;;           ($english-vocals (sound-spleeter.Output.vocals $spleeter-output))
;;           ($chinese-lyrics (machine-translation.Output.translation
;;                             (machine-translation.translate
;;                              (((machine-translation.MkInput "English") "Chinese")
;;                               (speech-recognition.Text.text
;;                                (speech-recognition.s2t
;;                                 (speech-recognition.MkAudio $english-vocals)))))))
;;           ($midi-notes (tomidi.MIDI.data (tomidi.a2m (tomidi.MkAudio $english-vocals))))
;;           ($chinese-vocals (midi2voice-zh.Answer.output_audio
;;                             (midi2voice-zh.singingZH
;;                              (((midi2voice-zh.MkQuery $chinese-lyrics) $midi-notes) 1.0)))))
;;      (mixer.Audio.data
;;       (mixer.mix
;;        ((mixer.MkMultiAudio (sound-spleeter.Output.accomp $spleeter-output)) $chinese-vocals)))))

;; The following MeTTa program represents the AI service composition
;; for the English to Chinese song translation, but uses let instead
;; of let*.
;;
;; (= (english-song-to-chinese-song $input)
;;    (let $spleeter-output (sound-spleeter.spleeter ((sound-spleeter.MkInput "") $input))
;;      (let $english-vocals (sound-spleeter.Output.vocals $spleeter-output)
;;        (let $chinese-lyrics (machine-translation.Output.translation
;;                              (machine-translation.translate
;;                               (((machine-translation.MkInput "English") "Chinese")
;;                                (speech-recognition.Text.text
;;                                 (speech-recognition.s2t
;;                                  (speech-recognition.MkAudio $english-vocals))))))
;;          (let $midi-notes (tomidi.MIDI.data (tomidi.a2m (tomidi.MkAudio $english-vocals)))
;;            (let $chinese-vocals (midi2voice-zh.Answer.output_audio
;;                                  (midi2voice-zh.singingZH
;;                                   (((midi2voice-zh.MkQuery $chinese-lyrics) $midi-notes) 1.0)))
;;              (mixer.Audio.data
;;               (mixer.mix
;;                ((mixer.MkMultiAudio (sound-spleeter.Output.accomp $spleeter-output)) $chinese-vocals)))))))))

;; Note that the program above can reduced by the MeTTa interpreter to
;;
;; (= (english-song-to-chinese-song $input)
;;    (mixer.Audio.data
;;     (mixer.mix
;;      ((mixer.MkMultiAudio
;;        (sound-spleeter.Output.accomp
;;         (sound-spleeter.spleeter
;;          ((sound-spleeter.MkInput "") $input))))
;;       (midi2voice-zh.Answer.output_audio
;;        (midi2voice-zh.singingZH
;;         (((midi2voice-zh.MkQuery
;;            (machine-translation.Output.translation
;;             (machine-translation.translate
;;              (((machine-translation.MkInput "English") "Chinese")
;;               (speech-recognition.Text.text
;;                (speech-recognition.s2t
;;                 (speech-recognition.MkAudio
;;                  (sound-spleeter.Output.vocals
;;                   (sound-spleeter.spleeter
;;                    ((sound-spleeter.MkInput "") $input))))))))))
;;           (tomidi.MIDI.data
;;            (tomidi.a2m
;;             (tomidi.MkAudio
;;              (sound-spleeter.Output.vocals
;;               (sound-spleeter.spleeter
;;                ((sound-spleeter.MkInput "") $input)))))) 1.0))))))))
;;
;; The problem is that sound-spleeter.spleeter is now called 3 times
;; instead of once.  This could addressed by using a process calculus
;; like ρ-calculus instead of λ-calculus.

;; The following lambda term has been obtained by converting MeTTa to
;; lambda-calculus as follow
;;
;; !(mt2lc (s z)
;;        (LET $spleeter-output
;;             (sound-spleeter.spleeter ((sound-spleeter.MkInput "") $input))
;;             (LET $english-vocals (sound-spleeter.Output.vocals $spleeter-output)
;;                  (LET $chinese-lyrics
;;                       (machine-translation.Output.translation
;;                        (machine-translation.translate
;;                         (((machine-translation.MkInput "English") "Chinese")
;;                          (speech-recognition.Text.text
;;                           (speech-recognition.s2t
;;                            (speech-recognition.MkAudio $english-vocals))))))
;;                       (LET $midi-notes (tomidi.MIDI.data (tomidi.a2m (tomidi.MkAudio $english-vocals)))
;;                            (LET $chinese-vocals
;;                                 (midi2voice-zh.Answer.output_audio
;;                                  (midi2voice-zh.singingZH
;;                                   (((midi2voice-zh.MkQuery $chinese-lyrics)
;;                                     $midi-notes) 1.0)))
;;                                 (mixer.Audio.data
;;                                  (mixer.mix
;;                                   ((mixer.MkMultiAudio
;;                                     (sound-spleeter.Output.accomp $spleeter-output))
;;                                    $chinese-vocals)))))))))
;;
;; and wrapping $input into a lambda abstraction using z as its
;; corresponding De Bruijn index.  Then adding type annotations via
;; add-type.  In the end we obtain the following lambda term
;;
;;         (λ z
;;           ((λ (s z)
;;              ((λ (s (s z))
;;                 ((λ (s (s (s z)))
;;                    ((λ (s (s (s (s z))))
;;                       ((λ (s (s (s (s (s z)))))
;;                          (mixer.Audio.data
;;                           (: (mixer.mix
;;                               (: ((mixer.MkMultiAudio
;;                                    (: (sound-spleeter.Output.accomp
;;                                        (: (s z) $t51913082)) $t51898733))
;;                                   (: (s (s (s (s (s z))))) $t51880775))
;;                                  $t51855788)) $t51829490)))
;;                        (: (midi2voice-zh.Answer.output_audio
;;                            (: (midi2voice-zh.singingZH
;;                                (: (((midi2voice-zh.MkQuery
;;                                      (: (s (s (s z))) $t52151099))
;;                                     (: (s (s (s (s z)))) $t52131583))
;;                                    (: 1.0 $t52104485))
;;                                   $t52075637))
;;                               $t52045478))
;;                           $t51726536)))
;;                     (: (tomidi.MIDI.data
;;                         (: (tomidi.a2m
;;                             (: (tomidi.MkAudio
;;                                 (: (s (s z)) $t52945476))
;;                                $t52929564))
;;                            $t12345678))
;;                        $t51422971)))
;;                  (: (machine-translation.Output.translation
;;                      (: (machine-translation.translate
;;                          (: (((machine-translation.MkInput
;;                                (: "English" $t56254732))
;;                               (: "Chinese" $t56245878))
;;                              (: (speech-recognition.Text.text
;;                                  (: (speech-recognition.s2t
;;                                      (: (speech-recognition.MkAudio
;;                                          (: (s (s z)) $t56315149))
;;                                         $t56299237))
;;                                     $t56282014))
;;                                 $t56230536))
;;                             $t56207979))
;;                         $t56184111))
;;                     $t50404647)))
;;               (: (sound-spleeter.Output.vocals
;;                   (: (s z) $t70938935)) $t46608723)))
;;            (: (sound-spleeter.spleeter
;;                (: ((sound-spleeter.MkInput
;;                     (: "" $t131081238))
;;                    (: z $t131072410))
;;                   $t131058283))
;;               $t31783546)))

;; Type check a portion of the English to Chinese singing AI service composition
!(assertEqual
  (bc &kb (Cons (: (s z) $t51913082) Nil) z (fromNumber 1)
      (: (sound-spleeter.Output.accomp (: (s z) $t51913082)) $t51898733))
  (: (sound-spleeter.Output.accomp
      (: (s z) sound-spleeter.Output)) Bytes))

;; Type check a portion of the English to Chinese singing AI service composition
!(assertEqual
  (bc &kb (Cons (: (s z) $t51913082) Nil) z (fromNumber 2)
      (: (mixer.MkMultiAudio (: (sound-spleeter.Output.accomp
                                 (: (s z) $t51913082)) $t51898733)) $thrm))
  (: (mixer.MkMultiAudio
      (: (sound-spleeter.Output.accomp
          (: (s z) sound-spleeter.Output)) Bytes))
     (-> Bytes mixer.MultiAudio)))

;; Type check a portion of the English to Chinese singing AI service composition
!(assertEqual
  (bc &kb
      (Cons (: (s z) $t51913082)
            (Cons (: (s (s (s (s (s z))))) $t51880775) Nil))
      z
      (fromNumber 2)
      (: (mixer.MkMultiAudio (: (sound-spleeter.Output.accomp
                                 (: (s z) $t51913082))
                                $t51898733))
         $thrm))
  (: (mixer.MkMultiAudio (: (sound-spleeter.Output.accomp
                             (: (s z) sound-spleeter.Output)) Bytes))
     (-> Bytes mixer.MultiAudio)))

;; Type check a portion of the English to Chinese singing AI service composition
!(assertEqual
  (bc &kb
      (Cons (: (s z) Bytes) (Cons (: z sound-spleeter.Output) Nil))
      z
      (fromNumber 3)
      (: ((mixer.MkMultiAudio (: (sound-spleeter.Output.accomp
                                  (: z sound-spleeter.Output)) Bytes))
          (: (s z) Bytes))
         $thrm))
  (: ((mixer.MkMultiAudio (: (sound-spleeter.Output.accomp
                              (: z sound-spleeter.Output)) Bytes))
      (: (s z) Bytes))
     mixer.MultiAudio))

;; Type check a portion of the English to Chinese singing AI service composition
!(assertEqual
  (bc &kb
      (Cons (: z $t51913082) (Cons (: (s z) $t51880775) Nil))
      z
      (fromNumber 3)
      (: ((mixer.MkMultiAudio (: (sound-spleeter.Output.accomp
                                  (: z $t51913082)) $t51898733))
          (: (s z) $t51880775))
         $thrm))
  (: ((mixer.MkMultiAudio (: (sound-spleeter.Output.accomp
                              (: z sound-spleeter.Output)) Bytes))
      (: (s z) Bytes))
     mixer.MultiAudio))

;; Type check a portion of the English to Chinese singing AI service composition
!(assertEqual
  (bc &kb
      (Cons (: (s z) $t51913082)
            (Cons (: (s (s (s (s (s z))))) $t51880775) Nil))
      z
      (fromNumber 4)
      (: (mixer.mix
          (: ((mixer.MkMultiAudio
               (: (sound-spleeter.Output.accomp
                   (: (s z) $t51913082)) $t51898733))
              (: (s (s (s (s (s z))))) $t51880775))
             $t51855788))
         $t51829490))
  (: (mixer.mix
      (: ((mixer.MkMultiAudio
           (: (sound-spleeter.Output.accomp
               (: (s z) sound-spleeter.Output)) Bytes))
          (: (s (s (s (s (s z))))) Bytes))
         mixer.MultiAudio))
     mixer.Audio))

;; Type check a portion of the English to Chinese singing AI service composition
!(assertEqual
  (bc &kb
      (Cons (: (s z) $t51913082)
            (Cons (: (s (s (s (s (s z))))) $t51880775) Nil))
      z
      (fromNumber 5)
      (: (mixer.Audio.data
          (: (mixer.mix
              (: ((mixer.MkMultiAudio
                   (: (sound-spleeter.Output.accomp
                       (: (s z) $t51913082)) $t51898733))
                  (: (s (s (s (s (s z))))) $t51880775))
                 $t51855788)) $t51829490))
         $thrm))
  (: (mixer.Audio.data
      (: (mixer.mix
          (: ((mixer.MkMultiAudio
               (: (sound-spleeter.Output.accomp
                   (: (s z) sound-spleeter.Output)) Bytes))
              (: (s (s (s (s (s z))))) Bytes))
             mixer.MultiAudio)) mixer.Audio))
     Bytes))

;; Type check a portion of the English to Chinese singing AI service composition
!(assertEqual
  (bc &kb
      (Cons (: (s z) $t51913082) Nil)
      (s (s (s (s (s z)))))
      (fromNumber 6)
      (: (λ (s (s (s (s (s z)))))
           (mixer.Audio.data
            (: (mixer.mix
                (: ((mixer.MkMultiAudio
                     (: (sound-spleeter.Output.accomp
                         (: (s z) $t51913082)) $t51898733))
                    (: (s (s (s (s (s z))))) $t51880775))
                   $t51855788)) $t51829490)))
         $thrm))
  (: (λ (s (s (s (s (s z)))))
       (mixer.Audio.data
        (: (mixer.mix
            (: ((mixer.MkMultiAudio
                 (: (sound-spleeter.Output.accomp
                     (: (s z) sound-spleeter.Output)) Bytes))
                (: (s (s (s (s (s z))))) Bytes))
               mixer.MultiAudio)) mixer.Audio)))
     (-> Bytes Bytes)))

;; Type check a portion of the English to Chinese singing AI service composition
!(assertEqual
  (bc &kb
      (Cons (: (s z) $t51913082)
            (Cons (: (s (s (s z))) $t52151099)
                  (Cons (: (s (s (s (s z)))) $t52131583) Nil)))
      (s (s (s (s (s z)))))
      (fromNumber 7)
      (: ((λ (s (s (s (s (s z)))))
            (mixer.Audio.data
             (: (mixer.mix
                 (: ((mixer.MkMultiAudio
                      (: (sound-spleeter.Output.accomp
                          (: (s z) $t51913082)) $t51898733))
                     (: (s (s (s (s (s z))))) $t51880775))
                    $t51855788)) $t51829490)))
          (: (midi2voice-zh.Answer.output_audio
              (: (midi2voice-zh.singingZH
                  (: (((midi2voice-zh.MkQuery
                        (: (s (s (s z))) $t52151099))
                       (: (s (s (s (s z)))) $t52131583))
                      (: 1.0 $t52104485))
                     $t52075637))
                 $t52045478))
             $t51726536))
         $thrm))
  (: ((λ (s (s (s (s (s z)))))
        (mixer.Audio.data
         (: (mixer.mix
             (: ((mixer.MkMultiAudio
                  (: (sound-spleeter.Output.accomp
                      (: (s z) sound-spleeter.Output)) Bytes))
                 (: (s (s (s (s (s z))))) Bytes))
                mixer.MultiAudio)) mixer.Audio)))
      (: (midi2voice-zh.Answer.output_audio
          (: (midi2voice-zh.singingZH
              (: (((midi2voice-zh.MkQuery
                    (: (s (s (s z))) String))
                   (: (s (s (s (s z)))) Bytes))
                  (: 1.0 Float))
                 midi2voice-zh.Query))
             midi2voice-zh.Answer))
         Bytes))
     Bytes))

;; ;; Type check a portion of the English to Chinese singing AI service composition
;; Disabled because it takes a long time
;; !(assertEqual
;;   (bc &kb
;;       (Cons (: (s z) $t51913082)
;;             (Cons (: (s (s (s z))) $t52151099) Nil))
;;       (s (s (s (s z))))
;;       (fromNumber 8)
;;       (: (λ (s (s (s (s z))))
;;            ((λ (s (s (s (s (s z)))))
;;               (mixer.Audio.data
;;                (: (mixer.mix
;;                    (: ((mixer.MkMultiAudio
;;                         (: (sound-spleeter.Output.accomp
;;                             (: (s z) $t51913082)) $t51898733))
;;                        (: (s (s (s (s (s z))))) $t51880775))
;;                       $t51855788)) $t51829490)))
;;             (: (midi2voice-zh.Answer.output_audio
;;                 (: (midi2voice-zh.singingZH
;;                     (: (((midi2voice-zh.MkQuery
;;                           (: (s (s (s z))) $t52151099))
;;                          (: (s (s (s (s z)))) $t52131583))
;;                         (: 1.0 $t52104485))
;;                        $t52075637))
;;                    $t52045478))
;;                $t51726536)))
;;          $thrm))
;;   (: (λ (s (s (s (s z))))
;;        ((λ (s (s (s (s (s z)))))
;;           (mixer.Audio.data
;;            (: (mixer.mix
;;                (: ((mixer.MkMultiAudio
;;                     (: (sound-spleeter.Output.accomp
;;                         (: (s z) sound-spleeter.Output)) Bytes))
;;                    (: (s (s (s (s (s z))))) Bytes))
;;                   mixer.MultiAudio)) mixer.Audio)))
;;         (: (midi2voice-zh.Answer.output_audio
;;             (: (midi2voice-zh.singingZH
;;                 (: (((midi2voice-zh.MkQuery
;;                       (: (s (s (s z))) String))
;;                      (: (s (s (s (s z)))) Bytes))
;;                     (: 1.0 Float))
;;                    midi2voice-zh.Query))
;;                midi2voice-zh.Answer))
;;            Bytes)))
;;      (-> Bytes Bytes)))

;; ;; Type check a portion of the English to Chinese singing AI service composition
;; Disabled because it takes a long tim
;; !(assertEqual
;;   (bc &kb
;;       (Cons (: (s z) $t51913082)
;;             (Cons (: (s (s z)) $t52945476)
;;                   (Cons (: (s (s (s z))) $t52151099) Nil)))
;;       (s (s (s (s z))))
;;       (fromNumber 9)
;;       (: ((λ (s (s (s (s z))))
;;             ((λ (s (s (s (s (s z)))))
;;                (mixer.Audio.data
;;                 (: (mixer.mix
;;                     (: ((mixer.MkMultiAudio
;;                          (: (sound-spleeter.Output.accomp
;;                              (: (s z) $t51913082)) $t51898733))
;;                         (: (s (s (s (s (s z))))) $t51880775))
;;                        $t51855788)) $t51829490)))
;;              (: (midi2voice-zh.Answer.output_audio
;;                  (: (midi2voice-zh.singingZH
;;                      (: (((midi2voice-zh.MkQuery
;;                            (: (s (s (s z))) $t52151099))
;;                           (: (s (s (s (s z)))) $t52131583))
;;                          (: 1.0 $t52104485))
;;                         $t52075637))
;;                     $t52045478))
;;                 $t51726536)))
;;           (: (tomidi.MIDI.data
;;               (: (tomidi.a2m
;;                   (: (tomidi.MkAudio
;;                       (: (s (s z)) $t52945476))
;;                      $t52929564))
;;                  $t12345678))
;;              $t51422971))
;;          $thrm))
;;   (: ((λ (s (s (s (s z))))
;;         ((λ (s (s (s (s (s z)))))
;;            (mixer.Audio.data
;;             (: (mixer.mix
;;                 (: ((mixer.MkMultiAudio
;;                      (: (sound-spleeter.Output.accomp
;;                          (: (s z) sound-spleeter.Output)) Bytes))
;;                     (: (s (s (s (s (s z))))) Bytes))
;;                    mixer.MultiAudio)) mixer.Audio)))
;;          (: (midi2voice-zh.Answer.output_audio
;;              (: (midi2voice-zh.singingZH
;;                  (: (((midi2voice-zh.MkQuery
;;                        (: (s (s (s z))) String))
;;                       (: (s (s (s (s z)))) Bytes))
;;                      (: 1.0 Float))
;;                     midi2voice-zh.Query))
;;                 midi2voice-zh.Answer))
;;             Bytes)))
;;       (: (tomidi.MIDI.data
;;           (: (tomidi.a2m
;;               (: (tomidi.MkAudio
;;                   (: (s (s z)) Bytes))
;;                  tomidi.Audio))
;;              tomidi.MIDI))
;;          Bytes))
;;      Bytes))

;; Type check the totality of the English to Chinese singing AI service composition
;; Disabled because it takes several hours
;; !(bc &kb Nil z (fromNumber 16)
;;      (: (λ z
;;           ((λ (s z)
;;              ((λ (s (s z))
;;                 ((λ (s (s (s z)))
;;                    ((λ (s (s (s (s z))))
;;                       ((λ (s (s (s (s (s z)))))
;;                          (mixer.Audio.data
;;                           (: (mixer.mix
;;                               (: ((mixer.MkMultiAudio
;;                                    (: (sound-spleeter.Output.accomp
;;                                        (: (s z) $t51913082)) $t51898733))
;;                                   (: (s (s (s (s (s z))))) $t51880775))
;;                                  $t51855788)) $t51829490)))
;;                        (: (midi2voice-zh.Answer.output_audio
;;                            (: (midi2voice-zh.singingZH
;;                                (: (((midi2voice-zh.MkQuery
;;                                      (: (s (s (s z))) $t52151099))
;;                                     (: (s (s (s (s z)))) $t52131583))
;;                                    (: 1.0 $t52104485))
;;                                   $t52075637))
;;                               $t52045478))
;;                           $t51726536)))
;;                     (: (tomidi.MIDI.data
;;                         (: (tomidi.a2m
;;                             (: (tomidi.MkAudio
;;                                 (: (s (s z)) $t52945476))
;;                                $t52929564))
;;                            $t12345678))
;;                        $t51422971)))
;;                  (: (machine-translation.Output.translation
;;                      (: (machine-translation.translate
;;                          (: (((machine-translation.MkInput
;;                                (: "English" $t56254732))
;;                               (: "Chinese" $t56245878))
;;                              (: (speech-recognition.Text.text
;;                                  (: (speech-recognition.s2t
;;                                      (: (speech-recognition.MkAudio
;;                                          (: (s (s z)) $t56315149))
;;                                         $t56299237))
;;                                     $t56282014))
;;                                 $t56230536))
;;                             $t56207979))
;;                         $t56184111))
;;                     $t50404647)))
;;               (: (sound-spleeter.Output.vocals
;;                   (: (s z) $t70938935)) $t46608723)))
;;            (: (sound-spleeter.spleeter
;;                (: ((sound-spleeter.MkInput
;;                     (: "" $t131081238))
;;                    (: z $t131072410))
;;                   $t131058283))
;;               $t31783546)))
;;         (-> Bytes Bytes)))
